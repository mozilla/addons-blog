version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3

references:
  attach_deploy_workspace: &attach_deploy_workspace
    attach_workspace:
      at: .

  deployment_container: &deployment_container
    docker:
      - image: cimg/python:3.10-node

  node_prod_container: &node_prod_container
    docker:
      - image: cimg/node:16.17

  install_aws_cli: &install_aws_cli
    run:
      name: Install AWS CLI
      command: |
        pip install --upgrade pip
        pip install --upgrade awscli

  persist_deploy_workspace: &persist_deploy_workspace
    persist_to_workspace:
      root: ./
      paths:
        - ./*

  restore_build_cache: &restore_build_cache
    restore_cache:
      name: restore yarn package cache
      keys:
        - yarn-packages-{{ checksum "yarn.lock" }}

  run_yarn_install: &run_yarn_install
    run:
      name: install dependencies
      # See: https://github.com/mozilla/addons-frontend/issues/3034
      command: yarn install --pure-lockfile

  save_build_cache: &save_build_cache
    save_cache:
      name: save yarn package cache
      key: yarn-packages-{{ checksum "yarn.lock" }}
      paths:
        - ~/.cache/yarn

jobs:
  test-wptheme:
    docker:
      - image: cimg/php:8.1-node
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn build:wptheme
      - run: yarn lint:php
      - run:
          name: run phpunit
          command: |
            echo "AMO_BASE_URL=$AMO_BASE_URL"
            composer install
            ./vendor/bin/phpunit
      - run: test -f wptheme.zip
    environment:
      # See: https://github.com/mozilla/addons-blog/pull/344#issuecomment-990961180
      AMO_BASE_URL: https://addons-dev.allizom.org

  test-blog:
    <<: *node_prod_container
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn test-ci
      - codecov/upload
      - run: yarn prettier-ci
      - run: yarn lint:js
      - run: yarn lint:scss
      - run:
          name: build assets
          command: |
            yarn sass:build
            yarn script:build
            bin/asset-pipeline

  build-blog-dev:
    <<: *node_prod_container
    steps:
      - checkout
      - *restore_build_cache
      - *run_yarn_install
      - *save_build_cache
      - run: yarn build:production
      - run: yarn test-build
      - *persist_deploy_workspace
    environment:
      # See: https://github.com/mozilla/addons-blog/issues/351
      AMO_BASE_URL: https://addons-dev.allizom.org

  build-blog-stage:
    <<: *node_prod_container
    steps:
      - checkout
      - run:
          name: checkout latest tag
          command: |
            LATEST_TAG=$(git describe --tags --abbrev=0 --match='20*.*.*-stage')
            echo "Latest tag is: $LATEST_TAG"
            git checkout "$LATEST_TAG"
      - *run_yarn_install
      - run: yarn build:production
      - run: yarn test-build
      - *persist_deploy_workspace

  build-blog-prod:
    <<: *node_prod_container
    steps:
      - checkout
      - *run_yarn_install
      - run: yarn build:production
      - run: yarn test-build
      - *persist_deploy_workspace

  deploy-dev:
    <<: *deployment_container
    steps:
      - *attach_deploy_workspace
      - *install_aws_cli
      - run:
          name: addons-blog deployment (dev)
          command: |
            pwd && ls -l

            AWS_ACCESS_KEY_ID="${DEV_AWS_ACCESS_KEY_ID}"              \
            AWS_SECRET_ACCESS_KEY="${DEV_AWS_SECRET_ACCESS_KEY}"      \
            ADDONS_BLOG_BUCKET="${DEV_ADDONS_BLOG_BUCKET}"            \
            ADDONS_BLOG_BUCKET_PREFIX="${ADDONS_BLOG_BUCKET_PREFIX}"  \
            AMO_BASE_URL=https://addons-dev.allizom.org               \
            ./bin/deploy.sh

  deploy-stage:
    <<: *deployment_container
    steps:
      - *attach_deploy_workspace
      - *install_aws_cli
      - run:
          name: addons-blog deployment (stage)
          command: |
            pwd && ls -l

            AWS_ACCESS_KEY_ID="${STAGE_AWS_ACCESS_KEY_ID}"            \
            AWS_SECRET_ACCESS_KEY="${STAGE_AWS_SECRET_ACCESS_KEY}"    \
            ADDONS_BLOG_BUCKET="${STAGE_ADDONS_BLOG_BUCKET}"          \
            ADDONS_BLOG_BUCKET_PREFIX="${ADDONS_BLOG_BUCKET_PREFIX}"  \
            AMO_BASE_URL=https://addons.allizom.org                   \
            ./bin/deploy.sh

  deploy-prod:
    <<: *deployment_container
    steps:
      - *attach_deploy_workspace
      - *install_aws_cli
      - run:
          name: addons-blog deployment (prod)
          command: |
            pwd && ls -l

            rm dist/robots.txt dist/blog/robots.txt

            AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"            \
            AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"    \
            ADDONS_BLOG_BUCKET="${ADDONS_BLOG_BUCKET}"          \
            ADDONS_BLOG_BUCKET_PREFIX="${ADDONS_BLOG_BUCKET_PREFIX}"  \
            AMO_BASE_URL=https://addons.mozilla.org                   \
            ./bin/deploy.sh

workflows:
  version: 2
  default-workflow:
    jobs:
      - test-wptheme
      - test-blog
      # -dev
      - build-blog-dev:
          requires:
            - test-blog
          filters:
            branches:
              only: main
      - deploy-dev:
          requires:
            - build-blog-dev
          filters:
            branches:
              only: main
      # -stage
      - build-blog-stage:
          # Note that the tags filter is needed because "Circle CI does not
          # run workflows for tags unless you explicitly specify tag filters.
          # Additionally, if a job requires any other jobs (directly or
          # indirectly), you must specify tag filters for those jobs.
          filters:
            tags:
              only: /.+-stage/
            branches:
              ignore: /.*/
      - deploy-stage:
          requires:
            - build-blog-stage
          filters:
            tags:
              only: /.+-stage/
            branches:
              ignore: /.*/
      # -prod
      - build-blog-prod:
          # Note that the tags filter is needed because "Circle CI does not
          # run workflows for tags unless you explicitly specify tag filters.
          # Additionally, if a job requires any other jobs (directly or
          # indirectly), you must specify tag filters for those jobs.
          filters:
            tags:
              # Matches tag names like `2021.09.10` or `2021.09.10-1`
              only: /20\d{2}\.\d{2}\.\d{2}(-\d+)?$/
            branches:
              ignore: /.*/
      - deploy-prod:
          requires:
            - build-blog-prod
          filters:
            tags:
              only: /20\d{2}\.\d{2}\.\d{2}(-\d+)?$/
            branches:
              ignore: /.*/

  autodeploy-stage:
    triggers:
      - schedule:
          # Every 3 hours (but without `*/3` because it is NOT supported), see:
          # https://circleci.com/docs/2.0/workflows/#scheduling-a-workflow
          cron: "0 0,3,6,9,12,15,18,21 * * *"
          filters:
            branches:
              only: main
    jobs:
      - build-blog-stage
      - deploy-stage:
          requires:
            - build-blog-stage
