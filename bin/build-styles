#!/usr/bin/env node

const fetch = require('node-fetch');
const fs = require('fs-extra');
const path = require('path');
const postcss = require('postcss');
const postcssURL = require('postcss-url');
const util = require('util');
const sass = require('node-sass');

const renderSass = util.promisify(sass.render);
const inputFile = './src/assets/css/styles.scss';
const outputFile = './build/blog/assets/css/styles.css';
const isProduction = process.env.ELEVENTY_ENV === 'production';

const buildAddonsFrontendBlogUtils = async function () {
  const addonsFrontendBlogUtilsInputFile = path.resolve(
    'node_modules/addons-frontend-blog-utils/style.css'
  );
  const addonsFrontendBlogUtilsOutputFile = path.resolve(
    'build/blog/assets/css/addons-frontend-blog-utils.style.css'
  );
  const assetsPath = path.resolve('build/blog/assets/img/');
  const css = await fs.readFile(addonsFrontendBlogUtilsInputFile, 'utf8');
  // addons-frontend-blog-utils style.css has paths to images, we want to copy
  // those to the right directory, rewrite the stylesheet, then the rewritten
  // file can be imported from ours.
  const options = {
    url: 'copy',
    basePath: path.resolve('node_modules/addons-frontend-blog-utils'),
    assetsPath,
    useHash: true,
  };

  await fs.mkdir(assetsPath, { recursive: true });
  await fs.mkdir(path.dirname(addonsFrontendBlogUtilsOutputFile), { recursive: true });

  const result = await postcss().use(postcssURL(options)).process(css, {
    from: addonsFrontendBlogUtilsInputFile,
    to: addonsFrontendBlogUtilsOutputFile,
  });
  return fs.writeFile(addonsFrontendBlogUtilsOutputFile, result.css);
};

const buildSass = async function () {
  await buildAddonsFrontendBlogUtils();
  const { css } = await renderSass({
    file: inputFile,
    includePaths: ['node_modules/'],
    outputStyle: isProduction ? 'compressed' : 'nested',
  });

  // This is a hint to know if this is a first run, in which case
  // we don't need to tell browserSync to update.
  const fileExisted = await fs.pathExists(outputFile);

  try {
    await fs.ensureFile(outputFile);
    await fs.writeFile(outputFile, css);
  } catch (error) {
    console.error(`Error writing generated CSS: ${error}`);
  }

  if (!isProduction && fileExisted) {
    // Tell browserSync to reload.
    try {
      await fetch(
        'http://localhost:8081/__browser_sync__?method=reload&args=styles.css'
      );
    } catch (error) {
      console.error(`Couldn't communicate with browserSync!`);
    }
  }
};

buildSass();
